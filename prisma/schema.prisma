generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}

model Store{
  id            String        @id @default(uuid())
  name          String
  userId        String
  billboards    Billboard[]   @relation("StoreToBillboard") 
  categories    Category[]    @relation("StoreToCategory")
  sizes         Size[]        @relation("StoreToSize")
  variants      Variant[]     @relation("StoreToVariant")
  products      Product[]     @relation("StoreToProduct")
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Billboard{
  id            String         @id @default(uuid())
  storeId       String
  store         Store          @relation("StoreToBillboard", fields: [storeId], references: [id])
  label         String
  imageUrl      String
  categories    Category[]     
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@index([storeId])
}

model Category{
  id            String         @id @default(uuid())
  storeId       String
  store         Store          @relation("StoreToCategory", fields: [storeId], references: [id])
  billboardId   String
  billboard     Billboard      @relation(fields: [billboardId], references: [id])
  product       Product[]      @relation("CategoryToProduct")
  name          String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@index([storeId])
  @@index([billboardId])
}

model Size{
  id            String         @id @default(uuid())
  storeId       String
  store         Store          @relation("StoreToSize", fields: [storeId], references: [id])
  name          String
  value         String
  product       Product[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  
  @@index([storeId])
}

model Variant{
  id             String        @id @default(uuid())
  storeId        String
  store          Store         @relation("StoreToVariant", fields: [storeId], references: [id])
  name           String
  value          String
  product        Product[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  
  @@index([storeId])
}

model Product{
  id             String        @id @default(uuid())
  storeId        String
  store          Store         @relation("StoreToProduct",fields: [storeId], references: [id])
  categoryId     String
  category       Category      @relation("CategoryToProduct", fields: [categoryId], references: [id])
  name           String
  price          Decimal
  isFeatured     Boolean       @default(false)
  isArchived     Boolean       @default(false)
  sizeId         String
  size           Size          @relation(fields: [sizeId], references: [id])
  variantId      String
  variant        Variant       @relation(fields: [variantId], references: [id])
  images         Image[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([variantId])
}

model Image{
  id             String        @id @default(uuid())
  productId      String
  product        Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  url            String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  @@index([productId])
}

